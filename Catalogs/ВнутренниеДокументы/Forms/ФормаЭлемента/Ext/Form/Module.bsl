#Область ОбработчикиСобытийФормы

&НаСервере
Процедура КМН_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		Если Объект.ВидДокумента.Наименование = "Командировка" Тогда
			Объект.Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
			Объект.ПорядокПродления = Перечисления.ПорядокПродления.ДопускаетПродление;
			
			НСтрока = КМН_ТаблицаАвансовыйОтчетРасходы.Добавить();
			НСтрока.ВидРасхода = "Суточные";
			НСтрока.Предопределенный = Истина;
			
			ИскНоменклатура = ПолучитьНоменклатуру("Суточные");
			Если ИскНоменклатура<>Неопределено Тогда
				НСтрока.ЦенаЕстьЧек = ИскНоменклатура.Цена;
			КонецЕсли;	
				
		КонецЕсли;
	Иначе
		Если Объект.ВидДокумента.Наименование = "Командировка" Тогда
			ЗагрузитьДопДанныеИзJSON("ДанныеАвансовыйОтчетРасходы", КМН_ТаблицаАвансовыйОтчетРасходы);
			ЗагрузитьДопДанныеИзJSON("ДанныеАвансовыйОтчетДоходы", КМН_ТаблицаАвансовыйОтчетДоходы);
			ЗагрузитьДопДанныеИзJSON("ДанныеПутевыеЛисты", КМН_ТаблицаПутевыеЛисты);
			ЗагрузитьДопДанныеИзЗначения("ФактДатаВозврата", КМН_ФактДатаВозврата);
			ЗагрузитьДопДанныеИзЗначения("ДатаАвансовогоОтчета", КМН_ДатаАвансовогоОтчета);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КМН_ПриОткрытииПосле(Отказ)
	
	КМН_СрокКомандировки = ?(Объект.ДатаОкончанияДействия = Дата(1,1,1), 0, (Объект.ДатаОкончанияДействия-Объект.ДатаНачалаДействия)/60/60/24+1);
	ВидДокументаНаименование = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "Наименование");

	УстановитьОформлениеФормы(ВидДокументаНаименование);

	Если ВидДокументаНаименование = "Командировка" Тогда
		ОбработкаРеквизитаНаКлиенте("СуммаЕстьЧек");
		ОбработкаРеквизитаНаКлиенте("СуммаНетЧека");
		ОбработкаРеквизитаНаКлиенте("СуммаНалДоходы");
		ОбработкаРеквизитаНаКлиенте("СуммаБезналДоходы");
		РассчитатьОстатокДС();
		ПроверкаСоответствияСуточных();
		ВывестиСуточныеДляОтчета();
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура КМН_ПередЗаписьюНаСервереПеред(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ВидДокумента.Наименование = "Командировка" Тогда
		Если ЗначениеЗаполнено(КМН_ДанныеАвансовыйОтчетРасходы) ИЛИ КМН_ТаблицаАвансовыйОтчетРасходы.Количество()>0 Тогда
			СохранитьДопДанныеВJSON(КМН_ТаблицаАвансовыйОтчетРасходы, "ДанныеАвансовыйОтчетРасходы");
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(КМН_ДанныеАвансовыйОтчетДоходы) ИЛИ КМН_ТаблицаАвансовыйОтчетДоходы.Количество()>0 Тогда
			СохранитьДопДанныеВJSON(КМН_ТаблицаАвансовыйОтчетДоходы, "ДанныеАвансовыйОтчетДоходы");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КМН_ДанныеПутевыеЛисты) ИЛИ КМН_ТаблицаПутевыеЛисты.Количество()>0 Тогда
			СохранитьДопДанныеВJSON(КМН_ТаблицаПутевыеЛисты, "ДанныеПутевыеЛисты");
		КонецЕсли;
		
		СохранитьДопДанныеВJSON(КМН_СуммаНалАвансовыйОтчетДоходы, "ВыданоНаличными");
		СохранитьДопДанныеВJSON(КМН_СуммаБезналАвансовыйОтчетДоходы, "ВыданоНаКарту");
		СохранитьДопДанныеВЗначение(КМН_ФактДатаВозврата, "ФактДатаВозврата");
		СохранитьДопДанныеВЗначение(КМН_ДатаАвансовогоОтчета, "ДатаАвансовогоОтчета");
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура КМН_ПослеЗаписиПосле(ПараметрыЗаписи)
	
	ВидДокументаНаименование = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "Наименование");
	УстановитьОформлениеФормы(ВидДокументаНаименование);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеФормы(ВидДокументаНаименование)
	
	УстановитьОформлениеФормыНаСервере(ВидДокументаНаименование);
	
	Если ВидДокументаНаименование = "Командировка" Тогда
		
		//Программно прячем доп. реквизит. Он хранит JSON, поэтому пользователю особо неинтересен.
		//Ищем на форме нужный нам доп реквизит
		//Свойства_ОписаниеДополнительныхРеквизитов - В документообороте, в других конфигурациях скорее всего по другому.
		
		ДопРеквизиты = Новый Структура;
		ДопРеквизиты.Вставить("ДанныеАвансовыйОтчетРасходы", Истина);
		ДопРеквизиты.Вставить("ДанныеАвансовыйОтчетДоходы", Истина);
		ДопРеквизиты.Вставить("ДанныеПутевыеЛисты", Истина);
		ДопРеквизиты.Вставить("ВыданоНаличными", Ложь);
		ДопРеквизиты.Вставить("ВыданоНаКарту", Ложь);
		ДопРеквизиты.Вставить("ФактДатаВозврата", Ложь);
		ДопРеквизиты.Вставить("ДатаАвансовогоОтчета", Ложь);
			
		Для Каждого ДопРеквизит Из ДопРеквизиты Цикл
			НайденныеСтроки = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Наименование", ДопРеквизит.Ключ));
			Если НайденныеСтроки.Количество() = 1 Тогда 
				Элементы[НайденныеСтроки[0].ИмяРеквизитаЗначение].Видимость = Ложь;
			КонецЕсли;		
			Если ДопРеквизит.Значение Тогда
				ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, ДопРеквизит.Ключ+":", "");
			КонецЕсли;	
		КонецЦикла;
		
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "Товары и услуги", "Смета расходов");
		
		//Добавляем данные по путевым листам в обзор
		ТочкаВставки = Найти(ПредставлениеHTML, "</table></body></html>");
		ПутевыеЛистыХТМЛ_Начало = "<br><tr><td><FONT color=#413003>Путевые листы:</FONT><p>";
		ПутевыеЛистыХТМЛ_Конец = "</p></td></tr>";
		ПутевыеЛистыХТМЛ_Тело = "";
		
		Для Каждого Лист Из КМН_ТаблицаПутевыеЛисты Цикл
			ПутевыеЛистыХТМЛ_Тело = ПутевыеЛистыХТМЛ_Тело+Лист.Номер+" от "+Формат(Лист.Дата, "ДФ=dd.MM.yyyy")+" ("+Лист.Автомобиль+")<br>";
		КонецЦикла;
		
		ПредставлениеHTML = Лев(ПредставлениеHTML, ТочкаВставки-1)+ПутевыеЛистыХТМЛ_Начало+ПутевыеЛистыХТМЛ_Тело+ПутевыеЛистыХТМЛ_Конец+"</table></body></html>";
		
		
		//настраиваем элементы формы
		Элементы.СтраницаТовары.Заголовок = "Смета расходов";
		Элементы.ГруппаСвойства.Заголовок = "Дополнительно";
		Элементы.СрокДействияСтрока.Заголовок = "Период командировки";
		
		Элементы.ГруппаДенежныеСредства.Видимость = Истина;
		Элементы.ГруппаАвансовыйОтчет.Видимость = Истина;
		Элементы.ГруппаПутевыеЛисты.Видимость = Истина;
		Элементы.КМН_НадписьПродление.Видимость = Истина;
		Элементы.ГруппаСумма.Видимость = Ложь;
		Элементы.КМН_НадписьПериодКомандировки.Видимость = Истина;
		Элементы.КМН_ФактДатаВозврата.Видимость = Истина;
				
		//Запретим ручное редактирование
		УстановитьДоступностьДопРеквизита("Срок командировки", Истина);
			
		//Уберем видимость дополнительных данных в обзоре		
		//т.к. данные таблиц хранятся в формате JSON, то ищем строки "[{...}]"
		МассДанных = ПолучитьДанныеСтроки("\[{.[^\]]*}\]");
		Для каждого Стр Из МассДанных Цикл
			ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, Стр, "");
		КонецЦикла;
				
	Иначе
		
		//настраиваем элементы формы
		Элементы.СтраницаТовары.Заголовок = "Товары и услуги";
		Элементы.СрокДействияСтрока.Заголовок = "Срок действия";
		
		Элементы.ГруппаДенежныеСредства.Видимость = Ложь;
		Элементы.ГруппаАвансовыйОтчет.Видимость = Ложь;
		Элементы.ГруппаПутевыеЛисты.Видимость = Ложь;
		Элементы.КМН_НадписьПродление.Видимость = Ложь;
		Элементы.КМН_НадписьПериодКомандировки.Видимость = Ложь;
		Элементы.КМН_ФактДатаВозврата.Видимость = Ложь;
		
		Элементы.Сумма.Вид = ВидПоляФормы.ПолеВвода;
		Элементы.Валюта.Вид = ВидПоляФормы.ПолеВвода;

	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеФормыНаСервере(ВидДокументаНаименование)
	
	Перем КомментарийСметыРасходов, НайденныеСтроки;
	
	Если ВидДокументаНаименование = "Командировка" И Объект.ПорядокПродления.Пустая() Тогда
		Объект.ПорядокПродления = Перечисления.ПорядокПродления.ДопускаетПродление;
	КонецЕсли;
	
	//Переместим свойство "Комментарий сметы расходов"
	НайденныеСтроки = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Наименование", "Комментарий сметы расходов"));
	Если НайденныеСтроки.Количество()>0 Тогда
		КомментарийСметыРасходов = Элементы[НайденныеСтроки[0].ИмяРеквизитаЗначение];
		КомментарийСметыРасходов.АвтоМаксимальнаяШирина = Ложь;
		КомментарийСметыРасходов.АвтоМаксимальнаяВысота = Ложь;
		КомментарийСметыРасходов.Заголовок = "Комментарий"; 
		ЭтаФорма.Элементы.Переместить(КомментарийСметыРасходов, Элементы.СтраницаТовары);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеСтроки(Выражение)
	
	//Воспользуемся регулярными выражениями
	//
	//	Левая скобка параметра = <
	//	Правая скобка параметра = >
	//	Шаблон имени = [А-ЯA-Z][-_ А-Яа-я0-9A-Za-z]*?
	
	idPattern = Выражение;
	
	RegExpLocal = Новый COMОбъект("VBScript.RegExp");
	
	RegExpLocal.Multiline = Истина;
	RegExpLocal.Global = Истина;
	RegExpLocal.IgnoreCase = Истина;
	RegExpLocal.Pattern = idPattern;
	
	МассНайдено = Новый Массив;
	Найдено = RegExpLocal.Execute(ПредставлениеHTML);
	Для каждого Стр Из Найдено Цикл
		
		Начало = Стр.FirstIndex;
		Длина = Стр.Length;
		Значение = Стр.Value;
		
		МассНайдено.Добавить(Значение);
	КонецЦикла;
	Возврат МассНайдено;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары
 
&НаКлиенте
Процедура КМН_ТоварыПриИзмененииПосле(Элемент)
	РассчитатьОстатокДС();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвансовыйОтчетРасходы

&НаКлиенте
Процедура КМН_КМН_ТаблицаАвансовыйОтчетРасходыЦенаЕстьЧекПриИзмененииВместо(Элемент)	
	ОбработкаРеквизитаНаКлиенте("ЦенаЕстьЧек", Элементы.КМН_ТаблицаАвансовыйОтчетРасходы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура КМН_КМН_ТаблицаАвансовыйОтчетРасходыКоличествоЕстьЧекПриИзмененииПеред(Элемент)
	ТекСтрока = Элементы.КМН_ТаблицаАвансовыйОтчетРасходы.ТекущиеДанные;
	ОбработкаРеквизитаНаКлиенте("КоличествоЕстьЧек", ТекСтрока);
	Если ТекСтрока.Предопределенный Тогда
		ПроверкаСоответствияСуточных();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КМН_КМН_ТаблицаАвансовыйОтчетРасходыСуммаЕстьЧекПриИзмененииПеред(Элемент)
	ОбработкаРеквизитаНаКлиенте("СуммаЕстьЧек", Элементы.КМН_ТаблицаАвансовыйОтчетРасходы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура КМН_КМН_ТаблицаАвансовыйОтчетРасходыЦенаНетЧекаПриИзмененииПеред(Элемент)
	ОбработкаРеквизитаНаКлиенте("ЦенаНетЧека", Элементы.КМН_ТаблицаАвансовыйОтчетРасходы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура КМН_КМН_ТаблицаАвансовыйОтчетРасходыКоличествоНетЧекаПриИзмененииПеред(Элемент)
	ОбработкаРеквизитаНаКлиенте("КоличествоНетЧека", Элементы.КМН_ТаблицаАвансовыйОтчетРасходы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура КМН_КМН_ТаблицаАвансовыйОтчетРасходыСуммаНетЧекаПриИзмененииПеред(Элемент)
	ОбработкаРеквизитаНаКлиенте("СуммаНетЧека", Элементы.КМН_ТаблицаАвансовыйОтчетРасходы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура КМН_КМН_ТаблицаАвансовыйОтчетРасходыПослеУдаленияВместо(Элемент)
	
	ОбработкаРеквизитаНаКлиенте("СуммаЕстьЧек");
	ОбработкаРеквизитаНаКлиенте("СуммаНетЧека");
	РассчитатьОстатокДС();

КонецПроцедуры

&НаКлиенте
Процедура КМН_КМН_ТаблицаАвансовыйОтчетРасходыПередУдалениемВместо(Элемент, Отказ)
	
	ТекСтрока = Элементы.КМН_ТаблицаАвансовыйОтчетРасходы.ТекущиеДанные;
	Если ТекСтрока.Предопределенный Тогда
		Отказ = Истина;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура КМН_КМН_ТаблицаАвансовыйОтчетРасходыПередНачаломИзмененияВместо(Элемент, Отказ)
	
	ТекСтрока = Элементы.КМН_ТаблицаАвансовыйОтчетРасходы.ТекущиеДанные;
	Если ТекСтрока.Предопределенный И Элемент.ТекущийЭлемент.Имя <> "КМН_ТаблицаАвансовыйОтчетРасходыКоличествоЕстьЧек" Тогда
		Отказ = Истина;
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвансовыйОтчетДоходы

&НаКлиенте
Процедура КМН_КМН_ТаблицаАвансовыйОтчетДоходыСуммаНалПриИзмененииПеред(Элемент)
	ОбработкаРеквизитаНаКлиенте("СуммаНалДоходы");
КонецПроцедуры

&НаКлиенте
Процедура КМН_КМН_ТаблицаАвансовыйОтчетДоходыСуммаБезналПриИзмененииПеред(Элемент)
	ОбработкаРеквизитаНаКлиенте("СуммаБезналДоходы");
КонецПроцедуры

&НаКлиенте
Процедура КМН_КМН_ТаблицаАвансовыйОтчетДоходыПриНачалеРедактированияВместо(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.КМН_ТаблицаАвансовыйОтчетДоходы.ТекущиеДанные.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КМН_КМН_ТаблицаАвансовыйОтчетДоходыПослеУдаленияВместо(Элемент)
	
	ОбработкаРеквизитаНаКлиенте("СуммаНалДоходы");
	ОбработкаРеквизитаНаКлиенте("СуммаБезналДоходы");
	РассчитатьОстатокДС();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПутевыеЛисты

&НаКлиенте
Процедура КМН_КМН_ТаблицаПутевыеЛистыОбработкаВыбораВместо(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.КМН_ТаблицаПутевыеЛисты.ТекущиеДанные;
	ТекСтрока.Автомобиль 	= ВыбранноеЗначение.Автомобиль;
	ТекСтрока.Номер		 	= ВыбранноеЗначение.Номер;
	ТекСтрока.Дата		 	= ВыбранноеЗначение.Дата;
	ТекСтрока.ИД			= ВыбранноеЗначение.ИД;	
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура КМН_КМН_ТаблицаПутевыеЛистыПередНачаломДобавленияВместо(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Параметры.Ключ.Пустая() Тогда
		Сообщить("Необходимо записать документ!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ЗаполнитьПутевойЛист(Истина);

КонецПроцедуры

&НаКлиенте
Процедура КМН_КМН_ТаблицаПутевыеЛистыВыборВместо(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаполнитьПутевойЛист();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КМН_КМН_ИзменитьПутевойЛистВместо(Команда)
	ЗаполнитьПутевойЛист();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПутевойЛист(ЭтоНовыйДокумент = Ложь)
	
	Если ЭтоНовыйДокумент Тогда
		ИДСтроки = ""+Объект.Ссылка.УникальныйИдентификатор()+"#"+Ранд(); 
	Иначе	
		ИДСтроки = Элементы.КМН_ТаблицаПутевыеЛисты.ТекущиеДанные.ИД;
	КонецЕсли;	
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ЭтоНовыйДокумент", ЭтоНовыйДокумент);
	ПараметрыОбъекта.Вставить("ОбъектГУИД"	, ИДСтроки);
	ПараметрыОбъекта.Вставить("ОбъектПроект", Объект.Проект);
	ПараметрыОбъекта.Вставить("ОбъектОрганизацияИНН", ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Организация, "ИНН"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеДО", ПараметрыОбъекта);
	
	ОткрытьФорму("Обработка.ПутевойЛистУАТ.Форма.Форма", ПараметрыФормы, Элементы.КМН_ТаблицаПутевыеЛисты);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОстатокДС()
	
	КМН_СуммаОстатокНал = КМН_СуммаНалАвансовыйОтчетДоходы - КМН_СуммаНетЧекаАвансовыйОтчетРасходы;
	КМН_СуммаОстатокБезНал = КМН_СуммаБезНалАвансовыйОтчетДоходы - КМН_СуммаЕстьЧекАвансовыйОтчетРасходы;
	
	ЗапрошеноНал  	= 0;
	ЗапрошеноБезнал = Объект.Товары.Итог("Сумма");
	
	ДвиженияДС = Новый Структура;
	ДвиженияДС.Вставить("СтатьяДС", "Запрошено всего");
	ДвиженияДС.Вставить("СуммаНал", ЗапрошеноНал);
	ДвиженияДС.Вставить("СуммаБезнал", ЗапрошеноБезнал);
	ЗаполнитьСводФинансов(ДвиженияДС);
	
	ДвиженияДС.Вставить("СтатьяДС", "Подтвержденные расходы");
	ДвиженияДС.Вставить("СуммаНал", КМН_СуммаНетЧекаАвансовыйОтчетРасходы);
	ДвиженияДС.Вставить("СуммаБезнал", КМН_СуммаЕстьЧекАвансовыйОтчетРасходы);
	ЗаполнитьСводФинансов(ДвиженияДС);
	
	ДвиженияДС.Вставить("СтатьяДС", "Переведено");
	ДвиженияДС.Вставить("СуммаНал", КМН_СуммаНалАвансовыйОтчетДоходы);
	ДвиженияДС.Вставить("СуммаБезнал", КМН_СуммаБезНалАвансовыйОтчетДоходы);
	ЗаполнитьСводФинансов(ДвиженияДС);
	
	ДвиженияДС.Вставить("СтатьяДС", "Остаток у сотрудника");
	ДвиженияДС.Вставить("СуммаНал", КМН_СуммаОстатокНал);
	ДвиженияДС.Вставить("СуммаБезнал", КМН_СуммаОстатокБезНал);
	ЗаполнитьСводФинансов(ДвиженияДС);
	
	ДвиженияДС.Вставить("СтатьяДС", "Необходимо перевести");
	
	Если КМН_ФактДатаВозврата = Дата(1,1,1) Тогда
		
		Если КМН_СуммаНалАвансовыйОтчетДоходы>ЗапрошеноНал Тогда
			НеобходимоПеревестиНал = -КМН_СуммаОстатокНал;
		Иначе
			Если КМН_СуммаОстатокНал>0 Тогда 
				НеобходимоПеревестиНал = ЗапрошеноНал-КМН_СуммаНалАвансовыйОтчетДоходы;
			Иначе
				Если КМН_СуммаНетЧекаАвансовыйОтчетРасходы>ЗапрошеноНал Тогда
					НеобходимоПеревестиНал = -КМН_СуммаОстатокНал;	
				Иначе
					НеобходимоПеревестиНал = ЗапрошеноНал-КМН_СуммаНалАвансовыйОтчетДоходы;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если КМН_СуммаБезНалАвансовыйОтчетДоходы>ЗапрошеноБезНал Тогда
			НеобходимоПеревестиБезНал = -КМН_СуммаОстатокБезНал;
		Иначе
			Если КМН_СуммаОстатокБезНал>0 Тогда 
				НеобходимоПеревестиБезНал = ЗапрошеноБезНал-КМН_СуммаБезНалАвансовыйОтчетДоходы;
			Иначе
				Если КМН_СуммаЕстьЧекАвансовыйОтчетРасходы>ЗапрошеноБезНал Тогда
					НеобходимоПеревестиБезНал = -КМН_СуммаОстатокБезНал;	
				Иначе
					НеобходимоПеревестиБезНал = ЗапрошеноБезНал-КМН_СуммаБезНалАвансовыйОтчетДоходы;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		НеобходимоПеревестиНал = КМН_СуммаНетЧекаАвансовыйОтчетРасходы - КМН_СуммаНалАвансовыйОтчетДоходы;
		НеобходимоПеревестиБезнал = КМН_СуммаЕстьЧекАвансовыйОтчетРасходы - КМН_СуммаБезНалАвансовыйОтчетДоходы;
	КонецЕсли;	
	
	ДвиженияДС.Вставить("СуммаНал", НеобходимоПеревестиНал);
	ДвиженияДС.Вставить("СуммаБезнал", НеобходимоПеревестиБезнал);
	ЗаполнитьСводФинансов(ДвиженияДС);

КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьСводФинансов(ДвиженияДС)
	
	ИскСтроки = КМН_СводПоФинансам.НайтиСтроки(Новый Структура("СтатьяДС", ДвиженияДС.СтатьяДС));
	Если ИскСтроки.Количество() = 0 Тогда
		НСтрока = КМН_СводПоФинансам.Добавить();
	Иначе
		НСтрока = ИскСтроки[0];
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НСтрока, ДвиженияДС);
	
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовФормы

&НаКлиенте
Процедура КМН_ВидДокументаПриИзмененииПосле(Элемент)
	
	ВидДокументаНаименование = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "Наименование");
	УстановитьОформлениеФормы(ВидДокументаНаименование);
	
КонецПроцедуры

&НаКлиенте
Процедура КМН_СрокДействияСтрокаНачалоВыбораВместо(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекущийПользователь", ТекущийПользователь);
	ПараметрыОткрытия.Вставить("СрокДействияДокументИсточникИзменения", СрокДействияДокументИсточникИзменения);
	ПараметрыОткрытия.Вставить("СрокДействияКомментарий", СрокДействияКомментарий);
	ПараметрыОткрытия.Вставить("ЭтаФорма", ЭтаФорма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИзменитьСрокДействияДокументаПродолжениеВместо",
		ЭтотОбъект);
	ПараметрыОткрытия.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ДелопроизводствоКлиент.ИзменитьСрокДействияДокумента(Объект, ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокДействияДокументаПродолжениеВместо(Результат, Параметры) Экспорт 

	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Объект.ДатаНачалаДействия = Результат.ДатаНачалаДействия;
		Объект.ДатаОкончанияДействия = Результат.ДатаОкончанияДействия;
		Объект.Бессрочный = Результат.Бессрочный;
		Объект.ПорядокПродления = Результат.ПорядокПродления;
		СрокДействияДокументИсточникИзменения = Результат.ДокументИсточникИзменения;
		СрокДействияКомментарий = Результат.Комментарий;
		СрокДействияСтрока = ДелопроизводствоКлиентСервер.СформироватьПредставлениеСрокаДействия(
			Объект, СрокДействияКомментарий);
		Модифицированность = Истина;
		
		КМН_СрокКомандировки = (Объект.ДатаОкончанияДействия-Объект.ДатаНачалаДействия)/60/60/24+1;
		УстановитьЗначениеДопРеквизита("Срок командировки", КМН_СрокКомандировки);
		ПроверкаСоответствияСуточных();
		ВывестиСуточныеДляОтчета();
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
			ПолучитьОбзорДокумента();
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры	

&НаКлиенте
Процедура КМН_КМН_ФактДатаВозвратаПриИзмененииВместо(Элемент)
	
	РассчитатьОстатокДС();
	
КонецПроцедуры

&НаКлиенте
Процедура КМН_КМН_ДатаАвансовогоОтчетаПриИзмененииВместо(Элемент)
	
	ВывестиСуточныеДляОтчета();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьДопДанныеИзЗначения(ИмяДопРеквизита, РеквизитФормы)
	
	//Считываем доп реквизит
	ДопРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяДопРеквизита);
	
	Если ЗначениеЗаполнено(ДопРеквизит) Тогда
				
		//Считываем значение доп реквизита
		НайденныеСтроки = Объект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ДопРеквизит));		
		Если НайденныеСтроки.Количество() = 0 Тогда Возврат КонецЕсли;
		
		ИскСтрока = ?(НайденныеСтроки.Количество() = 1, НайденныеСтроки[0], Неопределено);
		РеквизитФормы = ИскСтрока.Значение;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура СохранитьДопДанныеВЗначение(РеквизитФормы, ИмяДопРеквизита)
	
	НайденныеСтроки = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Наименование", ИмяДопРеквизита));

	Если ЭтаФорма[НайденныеСтроки[0].ИмяРеквизитаЗначение] <> РеквизитФормы Тогда
		ЭтаФорма[НайденныеСтроки[0].ИмяРеквизитаЗначение]  = РеквизитФормы;
	КонецЕсли;
	
КонецПроцедуры	

//Необходимо считать сам доп реквизит, далее прочитать его значение и построить по его значению таблицу значений.
&НаСервере
Процедура ЗагрузитьДопДанныеИзJSON(ИмяДопРеквизита, РеквизитФормы)
	
	//Считываем доп реквизит
	ДопРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяДопРеквизита);
	
	Если ЗначениеЗаполнено(ДопРеквизит) Тогда
				
		//Считываем значение доп реквизита
		НайденныеСтроки = Объект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ДопРеквизит));
		
		Если НайденныеСтроки.Количество() = 0 Тогда Возврат КонецЕсли;
		
		ИскСтрока = ?(НайденныеСтроки.Количество() = 1, НайденныеСтроки[0], Неопределено);
		ДопДанные = "";
		
		//Если значение прочитали пытаемся прочитать из JSON
		Если ИскСтрока <> Неопределено Тогда 
			Если ТипЗнч(ИскСтрока.Значение) = Тип("Строка") Тогда
				//Читаем JSON
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(?(ЗначениеЗаполнено(ИскСтрока.ТекстоваяСтрока), ИскСтрока.ТекстоваяСтрока, ИскСтрока.Значение));
				Попытка
					ДопДанные = ПрочитатьJSON(ЧтениеJSON);
				Исключение
				КонецПопытки;
			ИначеЕсли ТипЗнч(ИскСтрока.Значение) = Тип("Число") Тогда 
			    ДопДанные = ИскСтрока.Значение;
			КонецЕсли;	
		КонецЕсли;	
		
		Если ТипЗнч(ДопДанные) = Тип("Массив") Тогда
			//Заполняем таблицу
			Для Каждого СтрокаДД Из	ДопДанные Цикл 
				НСтрока = РеквизитФормы.Добавить();
				ЗаполнитьЗначенияСвойств(НСтрока, СтрокаДД);
				
				Если ТипЗнч(НСтрока.Дата) = Тип("Дата") Тогда
					НСтрока.Дата = ПрочитатьДатуJSON(СтрокаДД.Дата, ФорматДатыJSON.ISO);
				КонецЕсли;
			КонецЦикла;	                           
			
		Иначе
			РеквизитФормы = ДопДанные;
		КонецЕсли;
	КонецЕсли;
	
	//	//Мы уже зарание знаем какой элемент нужно искать по уникальному идентификатору
	//	//ПолучитьСсылкуПоGUIDИВидуОбъекта(СтрокаДД.КонтактноеЛицо,"Справочники.КонтактныеЛица");

КонецПроцедуры

&НаСервере
Процедура СохранитьДопДанныеВJSON(РеквизитФормы, ИмяДопРеквизита)
	
	НайденныеСтроки = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Наименование", ИмяДопРеквизита));
	
	//Описываем параметры записи и создаем запись JSON
	ПараметрыJSON	= Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " " , Истина, ЭкранированиеСимволовJSON.Нет, Ложь, Ложь, Ложь, Ложь);
	ЗаписьJSON		= Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Истина;
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	
	Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
	
		//Создаем массив структур на основании таблицы
		МассивДанныхТЗ = Новый Массив;
		КолонкиТЗ = РеквизитФормы.Выгрузить().Колонки;
		
		Для Каждого СтрокаТЗ Из РеквизитФормы Цикл
			ЗначенияСтроки = Новый Структура;
			
			Для Каждого Колонка Из КолонкиТЗ Цикл
				ЗначенияСтроки.Вставить(Колонка.Имя, СтрокаТЗ[Колонка.Имя]);
			КонецЦикла;
			
			МассивДанныхТЗ.Добавить(ЗначенияСтроки);
		КонецЦикла;
		//Записываем массив виде строки JSON						
		ЗаписатьJSON(ЗаписьJSON, МассивДанныхТЗ);
	Иначе
		ЗаписатьJSON(ЗаписьJSON, РеквизитФормы);
	КонецЕсли;	
		
	СтрокаJSON = ЗаписьJSON.Закрыть();
		
	Если ЭтаФорма[НайденныеСтроки[0].ИмяРеквизитаЗначение] <> СтрокаJSON Тогда
		ЭтаФорма[НайденныеСтроки[0].ИмяРеквизитаЗначение]  = СтрокаJSON;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаРеквизитаНаКлиенте(ИмяРеквизита, СтрокаТЧ = Неопределено)
	
	Если ИмяРеквизита = "ЦенаЕстьЧек" ИЛИ ИмяРеквизита = "КоличествоЕстьЧек" Тогда
		СтрокаТЧ.СуммаЕстьЧек = СтрокаТЧ.ЦенаЕстьЧек * СтрокаТЧ.КоличествоЕстьЧек;
		ОбработкаРеквизитаНаКлиенте("СуммаЕстьЧек");
		
	ИначеЕсли ИмяРеквизита = "СуммаЕстьЧек" И СтрокаТЧ<>Неопределено Тогда
		СтрокаТЧ.ЦенаЕстьЧек = СтрокаТЧ.СуммаЕстьЧек / СтрокаТЧ.КоличествоЕстьЧек;	
		ОбработкаРеквизитаНаКлиенте("СуммаЕстьЧек");
		
	ИначеЕсли ИмяРеквизита = "ЦенаНетЧека" ИЛИ ИмяРеквизита = "КоличествоНетЧека" Тогда
		СтрокаТЧ.СуммаНетЧека = СтрокаТЧ.ЦенаНетЧека * СтрокаТЧ.КоличествоНетЧека;
		ОбработкаРеквизитаНаКлиенте("СуммаНетЧека");
		
	ИначеЕсли ИмяРеквизита = "СуммаНетЧека" И СтрокаТЧ<>Неопределено Тогда
		СтрокаТЧ.ЦенаНетЧека = СтрокаТЧ.СуммаНетЧека / СтрокаТЧ.КоличествоНетЧека;	
		ОбработкаРеквизитаНаКлиенте("СуммаНетЧека");
		
	ИначеЕсли ИмяРеквизита = "СуммаЕстьЧек" Тогда
		КМН_СуммаЕстьЧекАвансовыйОтчетРасходы = КМН_ТаблицаАвансовыйОтчетРасходы.Итог("СуммаЕстьЧек");
		
	ИначеЕсли ИмяРеквизита = "СуммаНетЧека" Тогда	
		КМН_СуммаНетЧекаАвансовыйОтчетРасходы = КМН_ТаблицаАвансовыйОтчетРасходы.Итог("СуммаНетЧека");
		
	ИначеЕсли ИмяРеквизита = "СуммаНалДоходы" Тогда	
		КМН_СуммаНалАвансовыйОтчетДоходы = КМН_ТаблицаАвансовыйОтчетДоходы.Итог("СуммаНал");
		
	ИначеЕсли ИмяРеквизита = "СуммаБезналДоходы" Тогда	
		КМН_СуммаБезналАвансовыйОтчетДоходы = КМН_ТаблицаАвансовыйОтчетДоходы.Итог("СуммаБезнал");	
		
	КонецЕсли;
	
	РассчитатьОстатокДС();
	
КонецПроцедуры

//Функция возврата Ссылки по уникальному идентификатору и виду объекта
&НаСервере
Функция ПолучитьСсылкуПоGUIDИВидуОбъекта(GUIDВх,ВидОбъектаВх) Экспорт
	
	Результат=Неопределено;
	Попытка
		Выполнить("Результат = "+ВидОбъектаВх+".ПолучитьСсылку(Новый УникальныйИдентификатор("""+GUIDВх+"""));");
	Исключение
	КонецПопытки;
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция Ранд(Парам=0)
	
	СлучайноеЧисло = 0;
	Если Парам<>0 Тогда
		СлучайноеЧисло=Парам;
	КонецЕсли;
	
	Если Число(СлучайноеЧисло)=0 Тогда
		СлучайноеЧисло = Число(СтрЗаменить(Формат(ТекущаяДата(),"ДЛФ=T"),":",""));
		СлучайноеЧисло = (16807*СлучайноеЧисло)%2147483647;
	КонецЕсли;
	
	СлучайноеЧисло = (16807*СлучайноеЧисло)%2147483647;
	Случай = макс(СлучайноеЧисло,-СлучайноеЧисло);
	Возврат Окр(СлучайноеЧисло/2147483647,10);
	
КонецФункции  

&НаКлиенте
Процедура УстановитьЗначениеДопРеквизита(ИмяДопРеквизита, ЗначениеДопРеквизита)
	
	НайденныеСтроки = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Наименование", ИмяДопРеквизита));
	Если НайденныеСтроки.Количество()>0 Тогда
		ЭтаФорма[НайденныеСтроки[0].ИмяРеквизитаЗначение] = ЗначениеДопРеквизита;			
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьДоступностьДопРеквизита(ИмяДопРеквизита, Доступность)
	
	НайденныеСтроки = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Наименование", ИмяДопРеквизита));
	Если НайденныеСтроки.Количество()>0 Тогда
		Элементы[НайденныеСтроки[0].ИмяРеквизитаЗначение].ТолькоПросмотр = Доступность;
		Элементы[НайденныеСтроки[0].ИмяРеквизитаЗначение].Вид = ВидПоляФормы.ПолеНадписи;
		
		Если ИмяДопРеквизита = "Срок командировки" Тогда
			Элементы[НайденныеСтроки[0].ИмяРеквизитаЗначение].Заголовок = "Срок командировки (дни)";
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьНоменклатуру(Наименование)
	
	Возврат Справочники.Номенклатура.НайтиПоНаименованию(Наименование, Истина);
	
КонецФункции	

&НаКлиенте
Процедура ПроверкаСоответствияСуточных()
	
	ТекстНадписи = "Командировка с %1 по %2. Количество дней (суточные): %3";
	Элементы.КМН_НадписьПериодКомандировки.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписи, Формат(Объект.ДатаНачалаДействия,"ДФ=dd.MM.yy"), Формат(Объект.ДатаОкончанияДействия,"ДФ=dd.MM.yy"), КМН_СрокКомандировки);

	ИскСтроки = КМН_ТаблицаАвансовыйОтчетРасходы.НайтиСтроки(Новый Структура("Предопределенный", Истина));
	Если ИскСтроки.Количество()>0 И ИскСтроки.Количество() Тогда
		ТекстНадписи = "Проверьте суточные! Количество дней отличается от плана на %1";
		РазницаСуточные = ИскСтроки[0].КоличествоЕстьЧек - КМН_СрокКомандировки;
		РазницаСуточные = ?(РазницаСуточные<0, -РазницаСуточные, РазницаСуточные);
		Элементы.НадписьРасхождениеВСуточных.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписи, РазницаСуточные);
		Элементы.НадписьРасхождениеВСуточных.Видимость = ИскСтроки[0].КоличествоЕстьЧек <> КМН_СрокКомандировки И Объект.ДатаОкончанияДействия<=НачалоДня(ТекущаяДата());
	КонецЕсли	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВывестиСуточныеДляОтчета()
	
	ТекстНадписи = "Суточные с %1 по %2 : %3 дн.";
	СуточныеДляОтчета = ?(Объект.ДатаНачалаДействия<=КМН_ДатаАвансовогоОтчета, (КМН_ДатаАвансовогоОтчета-Объект.ДатаНачалаДействия)/60/60/24+1, 0);
	Элементы.НадписьПериодАвансовогоОтчета.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписи, Формат(Объект.ДатаНачалаДействия,"ДФ=dd.MM.yy"), Формат(КМН_ДатаАвансовогоОтчета,"ДФ=dd.MM.yy"), СуточныеДляОтчета);
	
КонецПроцедуры	

#КонецОбласти






